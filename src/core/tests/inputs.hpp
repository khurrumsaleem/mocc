/*
   Copyright 2016 Mitchell Young

   Licensed under the Apache License, Version 2.0 (the \"License\");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an \"AS IS\" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#pragma once

#include <string>

/*
This is a sufficiently complicated example that it should exercise most of the
features and variability of the CoreMesh class and its various clients. There
are square and non-square lattices, macroplanes of various sizes, non-uniform
plane heights.
 */
const std::string pinmesh_xml = 
"<mesh id=\"1\" type=\"cyl\" pitch=\"1.26\">"
"    <radii>0.54 0.62</radii>"
"    <sub_radii>5 2</sub_radii>"
"    <sub_azi>8</sub_azi>"
"</mesh>"
"<mesh id=\"2\" type=\"rect\" pitch=\"1.26\">"
"    <sub_x>3</sub_x>"
"    <sub_y>3</sub_y>"
"</mesh>";

const std::string material_xml =
"<material_lib path=\"c5g7.xsl\">"
"    <material id=\"1\" name=\"UO2-3.3\" />"
"    <material id=\"2\" name=\"MOX-4.3\" />"
"    <material id=\"6\" name=\"Moderator\" />"
"    <material id=\"7\" name=\"GuideTube\" />"
"    <material id=\"8\" name=\"CRod\" />"
"</material_lib>";

const std::string pin_xml =
"<!-- UO2 pin -->"
"<pin id=\"1\" mesh=\"1\">"
"    1 6 6"
"</pin>"
"<!-- MOx-4.3 pin -->"
"<pin id=\"2\" mesh=\"1\">"
"    2 6 6"
"</pin>"
"<!-- Moderator  -->"
"<pin id=\"6\" mesh=\"2\">"
"    6 6 6"
"    6 6 6"
"    6 6 6"
"</pin>"
""
"<!-- Guide Tube -->"
"<pin id=\"7\" mesh=\"1\">"
"    7 6 6"
"</pin>"
""
"<!-- Control Rod -->"
"<pin id=\"8\" mesh=\"1\">"
"    8 6 6"
"</pin>";

const std::string lattice_xml = 
"<!-- Unrodded UO2 -->"
"<lattice id=\"1\" nx=\"3\" ny=\"3\">"
"    1 1 1"
"    1 7 1"
"    1 1 1"
"</lattice>"
"<!-- Rodded UO2 -->"
"<lattice id=\"11\" nx=\"3\" ny=\"3\">"
"    1 8 1"
"    1 8 1"
"    1 1 1"
"</lattice>"
"<!-- Unrodded MOx -->"
"<lattice id=\"2\" nx=\"3\" ny=\"3\">"
"    2 2 2"
"    2 7 2"
"    2 2 2"
"</lattice>"
"<!-- Rodded MOx -->"
"<lattice id=\"22\" nx=\"3\" ny=\"3\">"
"    2 2 2"
"    2 8 2"
"    2 2 2"
"</lattice>"
""
"<!-- Reflector, rodded -->"
"<lattice id=\"33\" nx=\"3\" ny=\"3\">"
"    6 6 6"
"    6 8 6"
"    6 6 6"
"</lattice>"
"<!-- South boundary lattice -->"
"<lattice id=\"101\" nx=\"3\" ny=\"2\">"
"    1 1 1"
"    2 2 2"
"</lattice>"
"<!-- East boundary lattice -->"
"<lattice id=\"102\" nx=\"2\" ny=\"3\">"
"    1 2"
"    1 2"
"    1 2"
"</lattice>"
"<!-- South boundary lattice -->"
"<lattice id=\"103\" nx=\"2\" ny=\"2\">"
"    1 2"
"    2 2"
"</lattice>"
"<!-- South boundary reflector -->"
"<lattice id=\"201\" nx=\"3\" ny=\"2\">"
"    6 6 6"
"    6 6 6"
"</lattice>"
"<!-- East boundary reflector -->"
"<lattice id=\"202\" nx=\"2\" ny=\"3\">"
"    6 6"
"    6 6"
"    6 6"
"</lattice>"
"<!-- South boundary reflector -->"
"<lattice id=\"203\" nx=\"2\" ny=\"2\">"
"    6 6"
"    6 6"
"</lattice>";

const std::string assembly_xml =
"<assembly id=\"1\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {33 33 33 33 33}"
"        {33 33 33 33 33}"
"         33 33 33 33 33"
"        11 11 {11 11 11}"
"        {11 11 11 11 11}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"    </lattices>"
"</assembly>"
"<assembly id=\"2\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {33 33 33 33 33}"
"        {33 33 33 33 33}"
"         33 33 33 33 33"
"         2  2  {2  2  2}"
"        { 2  2  2  2  2}"
"        { 2  2  2  2  2}"
"        { 2  2  2  2  2}"
"        { 2  2  2  2  2}"
"        { 2  2  2  2  2}"
"    </lattices>"
"</assembly>"
"<assembly id=\"3\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {33 33 33 33 33}"
"        {33 33 33 33 33}"
"        33 33 33 33 33"
"         1  1  {1  1  1}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"        { 1  1  1  1  1}"
"    </lattices>"
"</assembly>"
"<assembly id=\"11\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {201 201 201 201 201}"
"        {201 201 201 201 201}"
"         201 201 201 201 201"
"        101 101 {101 101 101}"
"        {101 101 101 101 101}"
"        {101 101 101 101 101}"
"        {101 101 101 101 101}"
"        {101 101 101 101 101}"
"        {101 101 101 101 101}"
"    </lattices>"
"</assembly>"
"<assembly id=\"12\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {202 202 202 202 202}"
"        {202 202 202 202 202}"
"         202 202 202 202 202"
"         102 102 {102 102 102}"
"        {102 102 102 102 102}"
"        {102 102 102 102 102}"
"        {102 102 102 102 102}"
"        {102 102 102 102 102}"
"        {102 102 102 102 102}"
"    </lattices>"
"</assembly>"
"<assembly id=\"13\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {203 203 203 203 203}"
"        {203 203 203 203 203}"
"         203 203 203 203 203"
"        103 103 {103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"    </lattices>"
"</assembly>"
"<assembly id=\"100\" np=\"45\" hz=\"1.428\">"
"    <lattices>"
"        {203 203 203 203 203}"
"        {203 203 203 203 203}"
"         203 203 203 203 203"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"        {103 103 103 103 103}"
"    </lattices>"
"</assembly>";

const std::string complex_xml = 
pinmesh_xml + material_xml + pin_xml + lattice_xml + assembly_xml +
"<core nx=\"3\" ny=\"3\""
"    north=\"reflect\""
"    south=\"reflect\""
"    east=\"reflect\""
"    west=\"reflect\""
"    top=\"vacuum\""
"    bottom=\"reflect\">"
"     1  2 12"
"     2  3 12"
"    11 11 13"
"</core>";
